# Solved by Yeonhee

base = [[0, 1],
        [2, 3]]

# 번호에 대한 계산.(면적에 대한 계산이 아님.)
def Z(N, r, c):
    # base case
    if N == 1:
        return base[r][c]
    # recursive case
    return 4 * Z(N-1, r//2, c//2) + Z(1, r%2, c%2)

N, r, c = map(int, input().split())
print(Z(N, r, c))


"""
Z모양 방문으로 구성될 모든 크기의 행렬은

base = [[0, 1],
        [2, 3]]

형태로 표현할 수 있고, 각 요소는 또 같은 형태의 행렬로 무한히 쪼개질 수 있음을 고려해
위와 같은 재귀 함수로 구현했습니다.

행렬을 쪼개 가장 작은 유닛이 되었을 때, 이 유닛의 0행 0열의 값은 4의 배수가 되므로
N = 2일때는 출력값이 다음과 같습니다.

4**(N-1) * base[r//2][c//2] + base[r%2][c%2]
---------------------------   --------------
  기준값 (각 유닛의 0행 0열의 값)         상세값

이 출력값에서 아이디어를 얻어, recursive case는 다음과 같이 표현했습니다.

4 * Z(N-1, r//2, c//2) + Z(1, r%2, c%2)

"""
